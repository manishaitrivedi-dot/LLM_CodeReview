import os, json, requests

# Configuration - Dynamic for new repo
GH_TOKEN = os.environ.get("GH_TOKEN") or os.environ.get("GITHUB_TOKEN")
REPO = os.environ.get("GITHUB_REPOSITORY", "your-username/LLM_CodeReview")
PR_NUMBER = str(os.environ.get("GITHUB_PR_NUMBER") or os.environ.get("GITHUB_RUN_NUMBER", "1"))

if not GH_TOKEN:
    print("Error: GH_TOKEN or GITHUB_TOKEN environment variable required")
    exit(1)

headers = {
    "Authorization": f"token {GH_TOKEN}",
    "Accept": "application/vnd.github.v3+json"
}

def post_pr_comment(body: str):
    """Post general PR review comment"""
    url = f"https://api.github.com/repos/{REPO}/issues/{PR_NUMBER}/comments"
    response = requests.post(url, headers=headers, json={"body": body})
    if response.status_code == 201:
        print("Posted PR comment successfully")
    else:
        print(f"Failed to post PR comment: {response.status_code}")
        print(f"Response: {response.text}")

def post_inline_comments(comments):
    """Post inline comments for critical issues only"""
    # Get latest commit SHA for this PR
    commits_url = f"https://api.github.com/repos/{REPO}/pulls/{PR_NUMBER}/commits"
    commits_response = requests.get(commits_url, headers=headers)
    
    if commits_response.status_code != 200:
        print(f"Failed to get commits: {commits_response.status_code}")
        return
    
    commits = commits_response.json()
    latest_sha = commits[-1]["sha"]
    print(f"Using commit SHA: {latest_sha}")
    
    comment_url = f"https://api.github.com/repos/{REPO}/pulls/{PR_NUMBER}/comments"
    posted_count = 0
    
    for c in comments:
        data = {
            "body": c["body"],
            "commit_id": latest_sha,
            "path": c["path"],
            "side": "RIGHT",
            "line": c["line"]
        }
        
        response = requests.post(comment_url, headers=headers, json=data)
        if response.status_code == 201:
            print(f"Posted inline comment on line {c['line']}")
            posted_count += 1
        else:
            print(f"Failed to post inline comment on line {c['line']}: {response.status_code}")
            print(f"Response: {response.text}")
    
    print(f"Posted {posted_count}/{len(comments)} inline comments")

if __name__ == "__main__":
    try:
        print(f"Processing review for PR #{PR_NUMBER} in {REPO}")
        
        # Read the review output
        with open("review_output.json") as f:
            review_data = json.load(f)
        
        print(f"Found {len(review_data['criticals'])} critical issues")
        
        # Post overall PR review comment
        review_body = f"""## Automated LLM Code Review

**File Reviewed:** {review_data['file']}
**Critical Issues Found:** {len(review_data['criticals'])}

### Full Review:
{review_data['full_review']}

### Critical Issues Summary:
"""
        
        for critical in review_data['criticals']:
            # FIX: Use 'finding' instead of 'issue' since that's what cortex_python_review.py creates
            finding_text = critical.get('finding', 'No description available')
            line_num = critical.get('line', critical.get('line_number', 'N/A'))
            review_body += f"- **Line {line_num}:** {finding_text}\n"
        
        review_body += "\n*Critical issues are also posted as inline comments on specific lines.*"
        
        post_pr_comment(review_body)
        
        # Prepare inline comments for critical findings only
        inline_comments = []
        for c in review_data["criticals"]:
            # FIX: Get the correct fields from the critical finding
            finding_text = c.get('finding', 'No description available')
            recommendation_text = c.get('recommendation', 'Please review this issue')
            line_num = c.get('line', c.get('line_number', 1))
            filename = c.get('filename', c.get('file', review_data.get('file', 'unknown.py')))
            severity = c.get('severity', 'Critical')
            
            # Convert line number to int if it's not already
            try:
                if line_num == 'N/A':
                    line_num = 1
                else:
                    line_num = int(line_num)
            except (ValueError, TypeError):
                line_num = 1
            
            inline_comments.append({
                "path": filename,
                "line": line_num,
                "body": f"**{severity.upper()} ISSUE**\n\n{finding_text}\n\n**Recommendation:** {recommendation_text}\n\n*Generated by automated LLM code review*"
            })
        
        if inline_comments:
            print(f"Posting {len(inline_comments)} critical inline comments...")
            post_inline_comments(inline_comments)
        else:
            print("No critical issues found for inline comments")
            
    except FileNotFoundError:
        print("review_output.json not found. Run cortex_python_review.py first.")
        exit(1)
    except KeyError as e:
        print(f"Error: Missing key in review data: {e}")
        print("Available keys in criticals:")
        if 'criticals' in review_data and len(review_data['criticals']) > 0:
            print(review_data['criticals'][0].keys())
        exit(1)
    except Exception as e:
        print(f"Error: {e}")
        import traceback
        traceback.print_exc()
        exit(1)
